{"ast":null,"code":"import { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { Clipboard, ClipboardModule } from '@angular/cdk/clipboard';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Input, Output, NgZone, ViewChild, ViewContainerRef, Renderer2, Inject, Optional, NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzTransButtonModule } from 'ng-zorro-antd/core/trans-button';\nimport { NzI18nService, NzI18nModule } from 'ng-zorro-antd/i18n';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzAutosizeDirective, NzInputModule } from 'ng-zorro-antd/input';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { __decorate, __metadata } from 'tslib';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { cancelRequestAnimationFrame, reqAnimFrame } from 'ng-zorro-antd/core/polyfill';\nimport { NzResizeService } from 'ng-zorro-antd/core/services';\nimport { isStyleSupport, measure, InputBoolean, InputNumber } from 'ng-zorro-antd/core/util';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/clipboard';\nimport * as ɵngcc2 from 'ng-zorro-antd/i18n';\nimport * as ɵngcc3 from 'ng-zorro-antd/icon';\nimport * as ɵngcc4 from 'ng-zorro-antd/tooltip';\nimport * as ɵngcc5 from 'ng-zorro-antd/core/trans-button';\nimport * as ɵngcc6 from 'ng-zorro-antd/core/outlet';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from 'ng-zorro-antd/input';\nimport * as ɵngcc9 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc10 from '@angular/cdk/platform';\nimport * as ɵngcc11 from 'ng-zorro-antd/core/services';\nimport * as ɵngcc12 from '@angular/cdk/bidi';\nfunction NzTextCopyComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const icon_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzType\", icon_r1);\n  }\n}\nconst _c0 = [\"textarea\"];\nfunction NzTextEditComponent_button_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const icon_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzType\", icon_r3);\n  }\n}\nfunction NzTextEditComponent_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTextEditComponent_button_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r4.onClick());\n    });\n    ɵngcc0.ɵɵtemplate(1, NzTextEditComponent_button_0_ng_container_1_Template, 2, 1, \"ng-container\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzTooltipTitle\", ctx_r0.tooltip === null ? null : ctx_r0.tooltip || (ctx_r0.locale == null ? null : ctx_r0.locale.edit));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r0.icon);\n  }\n}\nfunction NzTextEditComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"textarea\", 5, 6);\n    ɵngcc0.ɵɵlistener(\"input\", function NzTextEditComponent_ng_container_1_Template_textarea_input_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r7.onInput($event));\n    })(\"blur\", function NzTextEditComponent_ng_container_1_Template_textarea_blur_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r9.confirm());\n    })(\"keydown.esc\", function NzTextEditComponent_ng_container_1_Template_textarea_keydown_esc_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r10.onCancel());\n    })(\"keydown.enter\", function NzTextEditComponent_ng_container_1_Template_textarea_keydown_enter_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r11.onEnter($event));\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTextEditComponent_ng_container_1_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r12.confirm());\n    });\n    ɵngcc0.ɵɵelement(4, \"i\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n}\nconst _c1 = [\"ellipsisContainer\"];\nconst _c2 = [\"expandable\"];\nconst _c3 = [\"contentTemplate\"];\nfunction NzTypographyComponent_ng_template_0_ng_content_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"!content\"]);\n  }\n}\nfunction NzTypographyComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, NzTypographyComponent_ng_template_0_ng_content_0_Template, 1, 0, \"ng-content\", 1);\n    ɵngcc0.ɵɵtext(1);\n  }\n  if (rf & 2) {\n    const content_r5 = ctx.content;\n    ɵngcc0.ɵɵproperty(\"ngIf\", !content_r5);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", content_r5, \" \");\n  }\n}\nfunction NzTypographyComponent_ng_container_2_ng_container_1_ng_template_1_Template(rf, ctx) {}\nfunction NzTypographyComponent_ng_container_2_ng_container_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r11.nzSuffix);\n  }\n}\nconst _c4 = function (a0) {\n  return {\n    content: a0\n  };\n};\nfunction NzTypographyComponent_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTypographyComponent_ng_container_2_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 6);\n    ɵngcc0.ɵɵtemplate(2, NzTypographyComponent_ng_container_2_ng_container_1_ng_container_2_Template, 2, 1, \"ng-container\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    const _r0 = ɵngcc0.ɵɵreference(1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(3, _c4, ctx_r7.nzContent));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r7.nzSuffix);\n  }\n}\nfunction NzTypographyComponent_ng_container_2_ng_template_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r13.ellipsisStr);\n  }\n}\nfunction NzTypographyComponent_ng_container_2_ng_template_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r14.nzSuffix);\n  }\n}\nfunction NzTypographyComponent_ng_container_2_ng_template_2_a_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"a\", 9, 10);\n    ɵngcc0.ɵɵlistener(\"click\", function NzTypographyComponent_ng_container_2_ng_template_2_a_4_Template_a_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      const ctx_r17 = ɵngcc0.ɵɵnextContext(3);\n      return ɵngcc0.ɵɵresetView(ctx_r17.onExpand());\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r15.locale == null ? null : ctx_r15.locale.expand);\n  }\n}\nfunction NzTypographyComponent_ng_container_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", null, 7);\n    ɵngcc0.ɵɵtemplate(2, NzTypographyComponent_ng_container_2_ng_template_2_ng_container_2_Template, 2, 1, \"ng-container\", 1);\n    ɵngcc0.ɵɵtemplate(3, NzTypographyComponent_ng_container_2_ng_template_2_ng_container_3_Template, 2, 1, \"ng-container\", 1);\n    ɵngcc0.ɵɵtemplate(4, NzTypographyComponent_ng_container_2_ng_template_2_a_4_Template, 3, 1, \"a\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.isEllipsis);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.nzSuffix);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.nzExpandable && ctx_r9.isEllipsis);\n  }\n}\nfunction NzTypographyComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTypographyComponent_ng_container_2_ng_container_1_Template, 3, 5, \"ng-container\", 4);\n    ɵngcc0.ɵɵtemplate(2, NzTypographyComponent_ng_container_2_ng_template_2_Template, 5, 3, \"ng-template\", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const _r8 = ɵngcc0.ɵɵreference(3);\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.expanded || !ctx_r2.hasOperationsWithEllipsis && ctx_r2.nzEllipsisRows === 1 && !ctx_r2.hasEllipsisObservers || ctx_r2.canCssEllipsis || ctx_r2.nzSuffix && ctx_r2.expanded)(\"ngIfElse\", _r8);\n  }\n}\nfunction NzTypographyComponent_nz_text_edit_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"nz-text-edit\", 11);\n    ɵngcc0.ɵɵlistener(\"endEditing\", function NzTypographyComponent_nz_text_edit_3_Template_nz_text_edit_endEditing_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r20);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r19.onEndEditing($event));\n    })(\"startEditing\", function NzTypographyComponent_nz_text_edit_3_Template_nz_text_edit_startEditing_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r20);\n      const ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r21.onStartEditing());\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"text\", ctx_r3.nzContent)(\"icon\", ctx_r3.nzEditIcon)(\"tooltip\", ctx_r3.nzEditTooltip);\n  }\n}\nfunction NzTypographyComponent_nz_text_copy_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"nz-text-copy\", 12);\n    ɵngcc0.ɵɵlistener(\"textCopy\", function NzTypographyComponent_nz_text_copy_4_Template_nz_text_copy_textCopy_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r22.onTextCopy($event));\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"text\", ctx_r4.copyText)(\"tooltips\", ctx_r4.nzCopyTooltips)(\"icons\", ctx_r4.nzCopyIcons);\n  }\n}\nconst _c5 = [\"*\"];\nlet NzTextCopyComponent = /*#__PURE__*/(() => {\n  class NzTextCopyComponent {\n    constructor(host, cdr, clipboard, i18n) {\n      this.host = host;\n      this.cdr = cdr;\n      this.clipboard = clipboard;\n      this.i18n = i18n;\n      this.copied = false;\n      this.copyId = -1;\n      this.nativeElement = this.host.nativeElement;\n      this.copyTooltip = null;\n      this.copedTooltip = null;\n      this.copyIcon = 'copy';\n      this.copedIcon = 'check';\n      this.destroy$ = new Subject();\n      this.icons = ['copy', 'check'];\n      this.textCopy = new EventEmitter();\n    }\n    ngOnInit() {\n      this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.locale = this.i18n.getLocaleData('Text');\n        this.updateTooltips();\n        this.cdr.markForCheck();\n      });\n    }\n    ngOnChanges(changes) {\n      const {\n        tooltips,\n        icons\n      } = changes;\n      if (tooltips) {\n        this.updateTooltips();\n      }\n      if (icons) {\n        this.updateIcons();\n      }\n    }\n    ngOnDestroy() {\n      clearTimeout(this.copyId);\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    onClick() {\n      if (this.copied) {\n        return;\n      }\n      this.copied = true;\n      this.cdr.detectChanges();\n      const text = this.text;\n      this.textCopy.emit(text);\n      this.clipboard.copy(text);\n      this.onCopied();\n    }\n    onCopied() {\n      clearTimeout(this.copyId);\n      this.copyId = setTimeout(() => {\n        this.copied = false;\n        this.cdr.detectChanges();\n      }, 3000);\n    }\n    updateTooltips() {\n      var _a, _b, _c, _d;\n      if (this.tooltips === null) {\n        this.copedTooltip = null;\n        this.copyTooltip = null;\n      } else if (Array.isArray(this.tooltips)) {\n        const [copyTooltip, copedTooltip] = this.tooltips;\n        this.copyTooltip = copyTooltip || ((_a = this.locale) === null || _a === void 0 ? void 0 : _a.copy);\n        this.copedTooltip = copedTooltip || ((_b = this.locale) === null || _b === void 0 ? void 0 : _b.copied);\n      } else {\n        this.copyTooltip = (_c = this.locale) === null || _c === void 0 ? void 0 : _c.copy;\n        this.copedTooltip = (_d = this.locale) === null || _d === void 0 ? void 0 : _d.copied;\n      }\n      this.cdr.markForCheck();\n    }\n    updateIcons() {\n      const [copyIcon, copedIcon] = this.icons;\n      this.copyIcon = copyIcon;\n      this.copedIcon = copedIcon;\n      this.cdr.markForCheck();\n    }\n  }\n  NzTextCopyComponent.ɵfac = function NzTextCopyComponent_Factory(t) {\n    return new (t || NzTextCopyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NzI18nService));\n  };\n  NzTextCopyComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTextCopyComponent,\n    selectors: [[\"nz-text-copy\"]],\n    inputs: {\n      icons: \"icons\",\n      text: \"text\",\n      tooltips: \"tooltips\"\n    },\n    outputs: {\n      textCopy: \"textCopy\"\n    },\n    exportAs: [\"nzTextCopy\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 4,\n    consts: [[\"type\", \"button\", \"nz-tooltip\", \"\", \"nz-trans-button\", \"\", 1, \"ant-typography-copy\", 3, \"nzTooltipTitle\", \"click\"], [4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", 3, \"nzType\"]],\n    template: function NzTextCopyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NzTextCopyComponent_Template_button_click_0_listener() {\n          return ctx.onClick();\n        });\n        ɵngcc0.ɵɵtemplate(1, NzTextCopyComponent_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-typography-copy-success\", ctx.copied);\n        ɵngcc0.ɵɵproperty(\"nzTooltipTitle\", ctx.copied ? ctx.copedTooltip : ctx.copyTooltip);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.copied ? ctx.copedIcon : ctx.copyIcon);\n      }\n    },\n    dependencies: [ɵngcc3.NzIconDirective, ɵngcc4.NzTooltipDirective, ɵngcc5.NzTransButtonDirective, ɵngcc6.NzStringTemplateOutletDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTextCopyComponent;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTextEditComponent = /*#__PURE__*/(() => {\n  class NzTextEditComponent {\n    constructor(zone, host, cdr, i18n) {\n      this.zone = zone;\n      this.host = host;\n      this.cdr = cdr;\n      this.i18n = i18n;\n      this.editing = false;\n      this.destroy$ = new Subject();\n      this.icon = 'edit';\n      this.startEditing = new EventEmitter();\n      this.endEditing = new EventEmitter(true);\n      this.nativeElement = this.host.nativeElement;\n    }\n    ngOnInit() {\n      this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.locale = this.i18n.getLocaleData('Text');\n        this.cdr.markForCheck();\n      });\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    onClick() {\n      this.beforeText = this.text;\n      this.currentText = this.beforeText;\n      this.editing = true;\n      this.startEditing.emit();\n      this.focusAndSetValue();\n    }\n    confirm() {\n      this.editing = false;\n      this.endEditing.emit(this.currentText);\n    }\n    onInput(event) {\n      const target = event.target;\n      this.currentText = target.value;\n    }\n    onEnter(event) {\n      event.stopPropagation();\n      event.preventDefault();\n      this.confirm();\n    }\n    onCancel() {\n      this.currentText = this.beforeText;\n      this.confirm();\n    }\n    focusAndSetValue() {\n      this.zone.onStable.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {\n        var _a;\n        if ((_a = this.textarea) === null || _a === void 0 ? void 0 : _a.nativeElement) {\n          this.textarea.nativeElement.focus();\n          this.textarea.nativeElement.value = this.currentText || '';\n          this.autosizeDirective.resizeToFitContent();\n          this.cdr.markForCheck();\n        }\n      });\n    }\n  }\n  NzTextEditComponent.ɵfac = function NzTextEditComponent_Factory(t) {\n    return new (t || NzTextEditComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NzI18nService));\n  };\n  NzTextEditComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTextEditComponent,\n    selectors: [[\"nz-text-edit\"]],\n    viewQuery: function NzTextEditComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(NzAutosizeDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textarea = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.autosizeDirective = _t.first);\n      }\n    },\n    inputs: {\n      icon: \"icon\",\n      text: \"text\",\n      tooltip: \"tooltip\"\n    },\n    outputs: {\n      startEditing: \"startEditing\",\n      endEditing: \"endEditing\"\n    },\n    exportAs: [\"nzTextEdit\"],\n    decls: 2,\n    vars: 2,\n    consts: [[\"nz-tooltip\", \"\", \"nz-trans-button\", \"\", \"class\", \"ant-typography-edit\", 3, \"nzTooltipTitle\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"nz-tooltip\", \"\", \"nz-trans-button\", \"\", 1, \"ant-typography-edit\", 3, \"nzTooltipTitle\", \"click\"], [4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", 3, \"nzType\"], [\"nz-input\", \"\", \"nzAutosize\", \"\", 3, \"input\", \"blur\", \"keydown.esc\", \"keydown.enter\"], [\"textarea\", \"\"], [\"nz-trans-button\", \"\", 1, \"ant-typography-edit-content-confirm\", 3, \"click\"], [\"nz-icon\", \"\", \"nzType\", \"enter\"]],\n    template: function NzTextEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTextEditComponent_button_0_Template, 2, 2, \"button\", 0);\n        ɵngcc0.ɵɵtemplate(1, NzTextEditComponent_ng_container_1_Template, 5, 0, \"ng-container\", 1);\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.editing);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.editing);\n      }\n    },\n    dependencies: [ɵngcc7.NgIf, ɵngcc3.NzIconDirective, ɵngcc4.NzTooltipDirective, ɵngcc8.NzInputDirective, ɵngcc8.NzAutosizeDirective, ɵngcc5.NzTransButtonDirective, ɵngcc6.NzStringTemplateOutletDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTextEditComponent;\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst NZ_CONFIG_MODULE_NAME = 'typography';\nconst EXPAND_ELEMENT_CLASSNAME = 'ant-typography-expand';\nlet NzTypographyComponent = /*#__PURE__*/(() => {\n  class NzTypographyComponent {\n    constructor(nzConfigService, host, cdr, viewContainerRef, renderer, platform, i18n, document, resizeService, directionality) {\n      this.nzConfigService = nzConfigService;\n      this.host = host;\n      this.cdr = cdr;\n      this.viewContainerRef = viewContainerRef;\n      this.renderer = renderer;\n      this.platform = platform;\n      this.i18n = i18n;\n      this.resizeService = resizeService;\n      this.directionality = directionality;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzCopyable = false;\n      this.nzEditable = false;\n      this.nzDisabled = false;\n      this.nzExpandable = false;\n      this.nzEllipsis = false;\n      this.nzCopyTooltips = undefined;\n      this.nzCopyIcons = ['copy', 'check'];\n      this.nzEditTooltip = undefined;\n      this.nzEditIcon = 'edit';\n      this.nzEllipsisRows = 1;\n      this.nzContentChange = new EventEmitter();\n      this.nzCopy = new EventEmitter();\n      this.nzExpandChange = new EventEmitter();\n      // This is not a two-way binding output with {@link nzEllipsis}\n      this.nzOnEllipsis = new EventEmitter();\n      this.expandableBtnElementCache = null;\n      this.editing = false;\n      this.cssEllipsis = false;\n      this.isEllipsis = true;\n      this.expanded = false;\n      this.ellipsisStr = '...';\n      this.dir = 'ltr';\n      this.viewInit = false;\n      this.rfaId = -1;\n      this.destroy$ = new Subject();\n      this.windowResizeSubscription = Subscription.EMPTY;\n      this.document = document;\n    }\n    get hasEllipsisObservers() {\n      return this.nzOnEllipsis.observers.length > 0;\n    }\n    get canCssEllipsis() {\n      return this.nzEllipsis && this.cssEllipsis && !this.expanded && !this.hasEllipsisObservers;\n    }\n    get hasOperationsWithEllipsis() {\n      return (this.nzCopyable || this.nzEditable || this.nzExpandable) && this.nzEllipsis;\n    }\n    get copyText() {\n      return typeof this.nzCopyText === 'string' ? this.nzCopyText : this.nzContent;\n    }\n    onTextCopy(text) {\n      this.nzCopy.emit(text);\n    }\n    onStartEditing() {\n      this.editing = true;\n    }\n    onEndEditing(text) {\n      this.editing = false;\n      this.nzContentChange.emit(text);\n      if (this.nzContent === text) {\n        this.renderOnNextFrame();\n      }\n      this.cdr.markForCheck();\n    }\n    onExpand() {\n      this.isEllipsis = false;\n      this.expanded = true;\n      this.nzExpandChange.emit();\n      this.nzOnEllipsis.emit(false);\n    }\n    canUseCSSEllipsis() {\n      if (this.nzEditable || this.nzCopyable || this.nzExpandable || this.nzSuffix) {\n        return false;\n      }\n      // make sure {@link nzOnEllipsis} works, will force use JS to calculations\n      if (this.hasEllipsisObservers) {\n        return false;\n      }\n      if (this.nzEllipsisRows === 1) {\n        return isStyleSupport('textOverflow');\n      } else {\n        return isStyleSupport('webkitLineClamp');\n      }\n    }\n    renderOnNextFrame() {\n      cancelRequestAnimationFrame(this.rfaId);\n      if (!this.viewInit || !this.nzEllipsis || this.nzEllipsisRows < 0 || this.expanded || !this.platform.isBrowser) {\n        return;\n      }\n      this.rfaId = reqAnimFrame(() => {\n        this.syncEllipsis();\n      });\n    }\n    getOriginContentViewRef() {\n      const viewRef = this.viewContainerRef.createEmbeddedView(this.contentTemplate, {\n        content: this.nzContent\n      });\n      viewRef.detectChanges();\n      return {\n        viewRef,\n        removeView: () => {\n          this.viewContainerRef.remove(this.viewContainerRef.indexOf(viewRef));\n        }\n      };\n    }\n    syncEllipsis() {\n      if (this.cssEllipsis) {\n        return;\n      }\n      const {\n        viewRef,\n        removeView\n      } = this.getOriginContentViewRef();\n      const fixedNodes = [this.textCopyRef, this.textEditRef].filter(e => e && e.nativeElement).map(e => e.nativeElement);\n      const expandableBtnElement = this.getExpandableBtnElement();\n      if (expandableBtnElement) {\n        fixedNodes.push(expandableBtnElement);\n      }\n      const {\n        contentNodes,\n        text,\n        ellipsis\n      } = measure(this.host.nativeElement, this.nzEllipsisRows, viewRef.rootNodes, fixedNodes, this.ellipsisStr, this.nzSuffix);\n      removeView();\n      this.ellipsisText = text;\n      if (ellipsis !== this.isEllipsis) {\n        this.isEllipsis = ellipsis;\n        this.nzOnEllipsis.emit(ellipsis);\n      }\n      const ellipsisContainerNativeElement = this.ellipsisContainer.nativeElement;\n      while (ellipsisContainerNativeElement.firstChild) {\n        this.renderer.removeChild(ellipsisContainerNativeElement, ellipsisContainerNativeElement.firstChild);\n      }\n      contentNodes.forEach(n => {\n        this.renderer.appendChild(ellipsisContainerNativeElement, n.cloneNode(true));\n      });\n      this.cdr.markForCheck();\n    }\n    // Need to create the element for calculation size before view init\n    getExpandableBtnElement() {\n      if (this.nzExpandable) {\n        const expandText = this.locale ? this.locale.expand : '';\n        const cache = this.expandableBtnElementCache;\n        if (!cache || cache.innerText === expandText) {\n          const el = this.document.createElement('a');\n          el.className = EXPAND_ELEMENT_CLASSNAME;\n          el.innerText = expandText;\n          this.expandableBtnElementCache = el;\n        }\n        return this.expandableBtnElementCache;\n      } else {\n        this.expandableBtnElementCache = null;\n        return null;\n      }\n    }\n    renderAndSubscribeWindowResize() {\n      if (this.platform.isBrowser) {\n        this.windowResizeSubscription.unsubscribe();\n        this.cssEllipsis = this.canUseCSSEllipsis();\n        this.renderOnNextFrame();\n        this.windowResizeSubscription = this.resizeService.subscribe().pipe(takeUntil(this.destroy$)).subscribe(() => this.renderOnNextFrame());\n      }\n    }\n    ngOnInit() {\n      var _a;\n      this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.locale = this.i18n.getLocaleData('Text');\n        this.cdr.markForCheck();\n      });\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngAfterViewInit() {\n      this.viewInit = true;\n      this.renderAndSubscribeWindowResize();\n    }\n    ngOnChanges(changes) {\n      const {\n        nzCopyable,\n        nzEditable,\n        nzExpandable,\n        nzEllipsis,\n        nzContent,\n        nzEllipsisRows,\n        nzSuffix\n      } = changes;\n      if (nzCopyable || nzEditable || nzExpandable || nzEllipsis || nzContent || nzEllipsisRows || nzSuffix) {\n        if (this.nzEllipsis) {\n          if (this.expanded) {\n            this.windowResizeSubscription.unsubscribe();\n          } else {\n            this.renderAndSubscribeWindowResize();\n          }\n        }\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.expandableBtnElementCache = null;\n      this.windowResizeSubscription.unsubscribe();\n    }\n  }\n  NzTypographyComponent.ɵfac = function NzTypographyComponent_Factory(t) {\n    return new (t || NzTypographyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.NzConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NzI18nService), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.NzResizeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc12.Directionality, 8));\n  };\n  NzTypographyComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NzTypographyComponent,\n    selectors: [[\"nz-typography\"], [\"\", \"nz-typography\", \"\"], [\"p\", \"nz-paragraph\", \"\"], [\"span\", \"nz-text\", \"\"], [\"h1\", \"nz-title\", \"\"], [\"h2\", \"nz-title\", \"\"], [\"h3\", \"nz-title\", \"\"], [\"h4\", \"nz-title\", \"\"]],\n    viewQuery: function NzTypographyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NzTextEditComponent, 5);\n        ɵngcc0.ɵɵviewQuery(NzTextCopyComponent, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEditRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textCopyRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ellipsisContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.expandableBtn = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n      }\n    },\n    hostVars: 24,\n    hostBindings: function NzTypographyComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"-webkit-line-clamp\", ctx.canCssEllipsis && ctx.nzEllipsisRows > 1 ? ctx.nzEllipsisRows : null);\n        ɵngcc0.ɵɵclassProp(\"ant-typography\", !ctx.editing)(\"ant-typography-rtl\", ctx.dir === \"rtl\")(\"ant-typography-edit-content\", ctx.editing)(\"ant-typography-secondary\", ctx.nzType === \"secondary\")(\"ant-typography-warning\", ctx.nzType === \"warning\")(\"ant-typography-danger\", ctx.nzType === \"danger\")(\"ant-typography-success\", ctx.nzType === \"success\")(\"ant-typography-disabled\", ctx.nzDisabled)(\"ant-typography-ellipsis\", ctx.nzEllipsis && !ctx.expanded)(\"ant-typography-ellipsis-single-line\", ctx.canCssEllipsis && ctx.nzEllipsisRows === 1)(\"ant-typography-ellipsis-multiple-line\", ctx.canCssEllipsis && ctx.nzEllipsisRows > 1);\n      }\n    },\n    inputs: {\n      nzCopyable: \"nzCopyable\",\n      nzEditable: \"nzEditable\",\n      nzDisabled: \"nzDisabled\",\n      nzExpandable: \"nzExpandable\",\n      nzEllipsis: \"nzEllipsis\",\n      nzCopyTooltips: \"nzCopyTooltips\",\n      nzCopyIcons: \"nzCopyIcons\",\n      nzEditTooltip: \"nzEditTooltip\",\n      nzEditIcon: \"nzEditIcon\",\n      nzEllipsisRows: \"nzEllipsisRows\",\n      nzContent: \"nzContent\",\n      nzType: \"nzType\",\n      nzCopyText: \"nzCopyText\",\n      nzSuffix: \"nzSuffix\"\n    },\n    outputs: {\n      nzContentChange: \"nzContentChange\",\n      nzCopy: \"nzCopy\",\n      nzExpandChange: \"nzExpandChange\",\n      nzOnEllipsis: \"nzOnEllipsis\"\n    },\n    exportAs: [\"nzTypography\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c5,\n    decls: 5,\n    vars: 3,\n    consts: [[\"contentTemplate\", \"\"], [4, \"ngIf\"], [3, \"text\", \"icon\", \"tooltip\", \"endEditing\", \"startEditing\", 4, \"ngIf\"], [3, \"text\", \"tooltips\", \"icons\", \"textCopy\", 4, \"ngIf\"], [4, \"ngIf\", \"ngIfElse\"], [\"jsEllipsis\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"ellipsisContainer\", \"\"], [\"class\", \"ant-typography-expand\", 3, \"click\", 4, \"ngIf\"], [1, \"ant-typography-expand\", 3, \"click\"], [\"expandable\", \"\"], [3, \"text\", \"icon\", \"tooltip\", \"endEditing\", \"startEditing\"], [3, \"text\", \"tooltips\", \"icons\", \"textCopy\"]],\n    template: function NzTypographyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, NzTypographyComponent_ng_template_0_Template, 2, 2, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(2, NzTypographyComponent_ng_container_2_Template, 4, 2, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(3, NzTypographyComponent_nz_text_edit_3_Template, 1, 3, \"nz-text-edit\", 2);\n        ɵngcc0.ɵɵtemplate(4, NzTypographyComponent_nz_text_copy_4_Template, 1, 3, \"nz-text-copy\", 3);\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.editing);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzEditable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzCopyable && !ctx.editing);\n      }\n    },\n    dependencies: [ɵngcc7.NgIf, ɵngcc7.NgTemplateOutlet, NzTextCopyComponent, NzTextEditComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzCopyable\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzEditable\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzExpandable\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzEllipsis\", void 0);\n  __decorate([WithConfig(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzCopyTooltips\", void 0);\n  __decorate([WithConfig(), __metadata(\"design:type\", Array)], NzTypographyComponent.prototype, \"nzCopyIcons\", void 0);\n  __decorate([WithConfig(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzEditTooltip\", void 0);\n  __decorate([WithConfig(), __metadata(\"design:type\", Object)], NzTypographyComponent.prototype, \"nzEditIcon\", void 0);\n  __decorate([WithConfig(), InputNumber(), __metadata(\"design:type\", Number)], NzTypographyComponent.prototype, \"nzEllipsisRows\", void 0);\n  return NzTypographyComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzTypographyModule = /*#__PURE__*/(() => {\n  class NzTypographyModule {}\n  NzTypographyModule.ɵfac = function NzTypographyModule_Factory(t) {\n    return new (t || NzTypographyModule)();\n  };\n  NzTypographyModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NzTypographyModule\n  });\n  NzTypographyModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [BidiModule, CommonModule, NzIconModule, NzToolTipModule, NzInputModule, NzI18nModule, NzTransButtonModule, ClipboardModule, NzOutletModule, PlatformModule]\n  });\n  return NzTypographyModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTypographyModule, {\n    declarations: function () {\n      return [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent];\n    },\n    imports: function () {\n      return [BidiModule, CommonModule, NzIconModule, NzToolTipModule, NzInputModule, NzI18nModule, NzTransButtonModule, ClipboardModule, NzOutletModule];\n    },\n    exports: function () {\n      return [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent, PlatformModule];\n    }\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTextCopyComponent, NzTextEditComponent, NzTypographyComponent, NzTypographyModule };\n\n//# sourceMappingURL=ng-zorro-antd-typography.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}